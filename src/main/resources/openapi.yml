---
openapi: 3.0.1
info:
  title: Ride Share Service
  version: v1
servers:
  - url: http://localhost:8080
paths:
  "/cars":
    post:
      summary: Removes all existing Rides, Pending Rides and Cars and creates the given Cars in their place
      operationId: resetCars
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/CarRequest"
        required: true
      responses:
        '200':
          description: OK
  "/rides":
    post:
      summary: Creates a new Ride and sets it up to be assigned to a Car
      operationId: createRide
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RideRequest"
        required: true
      responses:
        '202':
          description: OK
  "/rides/{id}/find":
    post:
      summary: Locates an existing Ride with the given ID and returns the Car assigned to it
      operationId: findRide
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: The Ride ID
      responses:
        '204':
          description: OK
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CarResponse"
  "/rides/{id}/end":
    post:
      summary: Ends an existing Ride with the given ID and releases any Car assigned to it
      operationId: endRide
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          description: The Ride ID
      responses:
        '204':
          description: OK
  "/check":
    get:
      summary: Returns a empty body.
      operationId: check
      responses:
        '200':
          description: OK
components:
  schemas:
    CarRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        seats:
          type: integer
          format: int32
    CarResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        seats:
          type: integer
          format: int32
        availableSeats:
          type: integer
          format: int32
    RideRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        people:
          type: integer
          format: int32
